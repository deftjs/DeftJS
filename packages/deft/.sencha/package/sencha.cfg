# The name of the package - should match the "name" property in ./package.json
#
package.name=deft

# The namespace to which this package's SASS corresponds. The default value of
# "Ext" means that the files in ./sass/src (and ./sass/var) match classes in
# the Ext" root namespace. In other words, "Ext.panel.Panel" maps to
# ./sass/src/panel/Panel.scss.
#
# To style classes from any namespace, set this to blank. If this is blank,
# then to style "Ext.panel.Panel" you would put SASS in
# ./sass/src/Ext/panel/Panel.scss.
#
package.sass.namespace=Ext

# This is the comma-separated list of folders where classes reside. These
# classes must be explicitly required to be included in the build.
#
package.classpath=${package.dir}/src

# This is the comma-separated list of folders of overrides. All files in this
# path will be given a tag of "packageOverrides" which is automatically
# required in generated apps by the presence of this line in app.js:
#
#   //@require @packageOverrides
#
package.overrides=${package.dir}/overrides

# This is the folder where SASS "src" resides. This is searched for SCSS
# files that match the JavaScript classes used by the application.
#
package.sass.srcpath=${package.dir}/sass/src

# This is the folder where SASS "vars" resides. This is searched for SCSS
# files that match the JavaScript classes used by the application.
#
package.sass.varpath=${package.dir}/sass/var

# This file is automatically imported into the SASS build before "vars".
#
package.sass.etcpath=${package.dir}/sass/etc/all.scss

# This is the folder in which to place "sencha packaage build" output.
#
package.build.dir=${package.dir}/build

#==============================================================================
# Custom Properties - Place customizations below this line to avoid merge
# conflicts with newer versions

package.cmd.version=3.1.2.342

# Automatically include ExtJS in the classpath
#
package.framework=ext
