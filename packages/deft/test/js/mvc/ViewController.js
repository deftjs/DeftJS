// Generated by CoffeeScript 1.6.2
/*
Copyright (c) 2012 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
*/
describe('Deft.mvc.ViewController', function() {
  var hasListener;

  hasListener = function(observable, eventName) {
    var _ref, _ref1;

    if (Ext.getVersion('extjs') != null) {
      if (Ext.getVersion('extjs').isLessThan('4.1.0')) {
        if (observable.events[eventName] === void 0) {
          observable.addEvents(eventName);
        }
      }
      if (observable.hasListener(eventName) || ((_ref = observable.events[eventName]) != null ? (_ref1 = _ref.listeners) != null ? _ref1.length : void 0 : void 0) > 0) {
        return true;
      } else {
        return false;
      }
    } else {
      return observable.hasListener(eventName);
    }
  };
  describe('Configuration', function() {
    specify('configurable with a reference to the view it controls', function() {
      var view, viewController;

      view = Ext.create('Ext.Container');
      viewController = Ext.create('Deft.mvc.ViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
    });
    specify('configurable at runtime with a reference to the view it controls', function() {
      var view, viewController;

      view = Ext.create('Ext.Container');
      viewController = Ext.create('Deft.mvc.ViewController');
      expect(viewController.getView()).to.equal(null);
      viewController.controlView(view);
      expect(viewController.getView()).to.equal(view);
    });
    return specify('throws an error if created and configured with a non-Ext.Component as the view', function() {
      expect(function() {
        return Ext.create('Deft.mvc.ViewController', {
          view: new Object()
        });
      }).to["throw"](Error, "Error constructing ViewController: the configured 'view' is not an Ext.Component.");
    });
  });
  describe('Creation of getters and event listeners using the \'control\' property', function() {
    beforeEach(function() {
      Ext.define('ExampleComponent', {
        extend: 'Ext.Component',
        alias: 'widget.example',
        renderTo: 'componentTestArea',
        fireExampleEvent: function(value) {
          this.fireEvent('exampleevent', this, value);
        }
      });
      Ext.define('ExampleView', {
        extend: 'Ext.Container',
        renderTo: 'componentTestArea',
        items: [
          {
            xtype: 'example',
            itemId: 'example'
          }
        ],
        config: {
          items: [
            {
              xtype: 'example',
              itemId: 'example'
            }
          ]
        },
        fireExampleEvent: function(value) {
          this.fireEvent('exampleevent', this, value);
        }
      });
      Ext.DomHelper.append(Ext.getBody(), '<div id="componentTestArea" style="visibility: hidden"></div>');
    });
    afterEach(function() {
      Ext.removeNode(Ext.get('componentTestArea').dom);
    });
    specify('attaches view controller scoped event listeners to events for the view', function() {
      var view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          view: {
            exampleevent: 'onExampleViewExampleEvent'
          }
        },
        onExampleViewExampleEvent: function(event) {}
      });
      sinon.spy(ExampleViewController.prototype, 'onExampleViewExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(hasListener(view, 'exampleevent')).to.be["true"];
      view.fireExampleEvent('expected value');
      expect(viewController.onExampleViewExampleEvent).to.be.calledOnce.and.calledWith(view, 'expected value').and.calledOn(viewController);
    });
    specify('attaches view controller scoped event listeners to events for a component view', function() {
      var view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          view: {
            exampleevent: 'onExampleViewExampleEvent'
          }
        },
        onExampleViewExampleEvent: function(event) {}
      });
      sinon.spy(ExampleViewController.prototype, 'onExampleViewExampleEvent');
      view = Ext.create('ExampleComponent');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(hasListener(view, 'exampleevent')).to.be["true"];
      view.fireExampleEvent('expected value');
      expect(viewController.onExampleViewExampleEvent).to.be.calledOnce.and.calledWith(view, 'expected value').and.calledOn(viewController);
    });
    specify('attaches view controller scoped event listeners (with options) to events for the view', function() {
      var view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          view: {
            exampleevent: {
              fn: 'onExampleViewExampleEvent',
              single: true
            }
          }
        },
        onExampleViewExampleEvent: function(event) {}
      });
      sinon.spy(ExampleViewController.prototype, 'onExampleViewExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(hasListener(view, 'exampleevent')).to.be["true"];
      view.fireExampleEvent('expected value');
      view.fireExampleEvent('unexpected value');
      expect(viewController.onExampleViewExampleEvent).to.be.calledOnce.and.calledWith(view, 'expected value', {
        single: true
      }).and.calledOn(viewController);
    });
    specify('attaches event listeners (with options) to events for the view', function() {
      var eventListenerFunction, expectedScope, view, viewController;

      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      eventListenerFunction = sinon.stub();
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          view: {
            exampleevent: {
              fn: eventListenerFunction,
              scope: expectedScope,
              single: true
            }
          }
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(hasListener(view, 'exampleevent')).to.be["true"];
      view.fireExampleEvent('expected value');
      view.fireExampleEvent('unexpected value');
      expect(eventListenerFunction).to.be.calledOnce.and.calledWith(view, 'expected value', {
        single: true
      }).and.calledOn(expectedScope);
    });
    specify('throws an error when attaching a non-existing view controller scoped event listener for the view', function() {
      var view;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          view: {
            exampleevent: 'onExampleViewExampleEvent'
          }
        }
      });
      view = Ext.create('ExampleView');
      expect(function() {
        var viewController;

        return viewController = Ext.create('ExampleViewController', {
          view: view
        });
      }).to["throw"](Error, 'Error adding \'exampleevent\' listener: the specified handler \'onExampleViewExampleEvent\' is not a Function or does not exist.');
    });
    specify('creates a view controller getter for a view component referenced implicitly by itemId', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: true
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      component = view.query('#example')[0];
      expect(viewController.getExample()).to.equal(component);
    });
    specify('throws an error when referencing a non-existent component implicitly by itemId', function() {
      var view;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          doesntexist: true
        }
      });
      view = Ext.create('ExampleView');
      expect(function() {
        var viewController;

        return viewController = Ext.create('ExampleViewController', {
          view: view
        });
      }).to["throw"](Error, 'Error locating component: no component(s) found matching \'#doesntexist\'.');
    });
    specify('creates a view controller getter for a view component referenced implicitly by selector', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: '#example'
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      component = view.query('#example')[0];
      expect(viewController.getExample()).to.equal(component);
    });
    specify('throws an error when referencing a non-existent component implicitly by selector', function() {
      var view;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: '#doesntexist'
        }
      });
      view = Ext.create('ExampleView');
      expect(function() {
        var viewController;

        return viewController = Ext.create('ExampleViewController', {
          view: view
        });
      }).to["throw"](Error, 'Error locating component: no component(s) found matching \'#doesntexist\'.');
    });
    specify('creates a view controller getter for a view component referenced explicitly by selector', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: '#example'
          }
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      component = view.query('#example')[0];
      expect(viewController.getExample()).to.equal(component);
    });
    specify('creates a view controller getter for view components referenced explicitly by selector', function() {
      var components, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: 'example'
          }
        }
      });
      view = Ext.create('ExampleView', {
        items: [
          {
            xtype: 'example'
          }, {
            xtype: 'example'
          }, {
            xtype: 'example'
          }
        ]
      });
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      components = view.query('example');
      expect(viewController.getExample()).to.deep.equal(components);
    });
    specify('throws an error when referencing a non-existent component explicitly by selector', function() {
      var view;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: '#doesntexist'
          }
        }
      });
      view = Ext.create('ExampleView');
      expect(function() {
        var viewController;

        return viewController = Ext.create('ExampleViewController', {
          view: view
        });
      }).to["throw"](Error, 'Error locating component: no component(s) found matching \'#doesntexist\'.');
    });
    specify('creates a view controller getter and attach view controller scoped event listeners to events for a view component referenced implicitly by itemId', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            exampleevent: 'onExampleComponentExampleEvent'
          }
        },
        onExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      component = view.query('#example')[0];
      expect(viewController.getExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      expect(viewController.onExampleComponentExampleEvent).to.be.calledOnce.and.calledWith(component, 'expected value').and.calledOn(viewController);
    });
    specify('creates a view controller getter and attach view controller scoped event listeners (with options) to events for a view component referenced implicitly by itemId', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            exampleevent: {
              fn: 'onExampleComponentExampleEvent',
              single: true
            }
          }
        },
        onExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      component = view.query('#example')[0];
      expect(viewController.getExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      component.fireExampleEvent('unexpected value');
      expect(viewController.onExampleComponentExampleEvent).to.be.calledOnce.and.calledWith(component, 'expected value', {
        single: true
      }).and.calledOn(viewController);
    });
    specify('creates a view controller getter and attach event listeners (with options) to events for a view component referenced implicitly by itemId', function() {
      var component, eventListenerFunction, expectedScope, view, viewController;

      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      eventListenerFunction = sinon.stub();
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            exampleevent: {
              fn: eventListenerFunction,
              scope: expectedScope,
              single: true
            }
          }
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      component = view.query('#example')[0];
      expect(viewController.getExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      component.fireExampleEvent('unexpected value');
      expect(eventListenerFunction).to.be.calledOnce.and.calledWith(component, 'expected value', {
        single: true
      }).and.calledOn(expectedScope);
    });
    specify('throws an error when attaching a non-existing view controller scoped event listener for a view component referenced implicitly by itemId', function() {
      var view;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            exampleevent: 'onExampleComponentExampleEvent'
          }
        }
      });
      view = Ext.create('ExampleView');
      expect(function() {
        var viewController;

        return viewController = Ext.create('ExampleViewController', {
          view: view
        });
      }).to["throw"](Error, 'Error adding \'exampleevent\' listener: the specified handler \'onExampleComponentExampleEvent\' is not a Function or does not exist.');
    });
    specify('creates a view controller getter and attach view controller scoped event listeners to events for a view component referenced by selector', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: '#example',
            listeners: {
              exampleevent: 'onExampleComponentExampleEvent'
            }
          }
        },
        onExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      component = view.query('#example')[0];
      expect(viewController.getExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      expect(viewController.onExampleComponentExampleEvent).to.be.calledOnce.and.calledWith(component, 'expected value').and.calledOn(viewController);
    });
    specify('creates a view controller getter and attach view controller scoped event listeners (with options) to events for a view component referenced by selector', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: '#example',
            listeners: {
              exampleevent: {
                fn: 'onExampleComponentExampleEvent',
                single: true
              }
            }
          }
        },
        onExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      component = view.query('#example')[0];
      expect(viewController.getExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      component.fireExampleEvent('unexpected value');
      expect(viewController.onExampleComponentExampleEvent).to.be.calledOnce.and.calledWith(component, 'expected value', {
        single: true
      }).and.calledOn(viewController);
    });
    specify('creates a view controller getter and attach event listeners (with options) to events for a view component referenced by selector', function() {
      var component, eventListenerFunction, expectedScope, view, viewController;

      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      eventListenerFunction = sinon.stub();
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: '#example',
            listeners: {
              exampleevent: {
                fn: eventListenerFunction,
                scope: expectedScope,
                single: true
              }
            }
          }
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      component = view.query('#example')[0];
      expect(viewController.getExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      component.fireExampleEvent('unexpected value');
      expect(eventListenerFunction).to.be.calledOnce.and.calledWith(component, 'expected value', {
        single: true
      }).and.calledOn(expectedScope);
    });
    specify('throws an error when attaching a non-existing view controller scoped event listener for a view component referenced implicitly by selector', function() {
      var view;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: '#example',
            listeners: {
              exampleevent: 'onExampleComponentExampleEvent'
            }
          }
        }
      });
      view = Ext.create('ExampleView');
      expect(function() {
        var viewController;

        return viewController = Ext.create('ExampleViewController', {
          view: view
        });
      }).to["throw"](Error, 'Error adding \'exampleevent\' listener: the specified handler \'onExampleComponentExampleEvent\' is not a Function or does not exist.');
    });
    specify('creates a view controller getter and attach view controller scoped event listeners to events for view components referenced by selector', function() {
      var component, components, view, viewController, _i, _len;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: 'example',
            listeners: {
              exampleevent: 'onExampleComponentExampleEvent'
            }
          }
        },
        onExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onExampleComponentExampleEvent');
      view = Ext.create('ExampleView', {
        items: [
          {
            xtype: 'example'
          }, {
            xtype: 'example'
          }, {
            xtype: 'example'
          }
        ]
      });
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      components = view.query('example');
      expect(viewController.getExample()).to.deep.equal(components);
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        expect(hasListener(component, 'exampleevent')).to.be["true"];
        component.fireExampleEvent('expected value');
        expect(viewController.onExampleComponentExampleEvent.lastCall).to.be.calledWith(component, 'expected value').and.calledOn(viewController);
      }
      expect(viewController.onExampleComponentExampleEvent.callCount).to.equal(components.length);
    });
    specify('creates a view controller getter and attach view controller scoped event listeners (with options) to events for view components referenced by selector', function() {
      var component, components, view, viewController, _i, _j, _len, _len1;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: 'example',
            listeners: {
              exampleevent: {
                fn: 'onExampleComponentExampleEvent',
                single: true
              }
            }
          }
        },
        onExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onExampleComponentExampleEvent');
      view = Ext.create('ExampleView', {
        items: [
          {
            xtype: 'example'
          }, {
            xtype: 'example'
          }, {
            xtype: 'example'
          }
        ]
      });
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      components = view.query('example');
      expect(viewController.getExample()).to.deep.equal(components);
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        expect(hasListener(component, 'exampleevent')).to.be["true"];
        component.fireExampleEvent('expected value');
        expect(viewController.onExampleComponentExampleEvent.lastCall).to.be.calledWith(component, 'expected value', {
          single: true
        }).and.calledOn(viewController);
      }
      expect(viewController.onExampleComponentExampleEvent.callCount).to.equal(3);
      viewController.onExampleComponentExampleEvent.reset();
      for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
        component = components[_j];
        expect(hasListener(component, 'exampleevent')).to.be["false"];
        component.fireExampleEvent('unexpected value');
        expect(viewController.onExampleComponentExampleEvent).not.to.be.called;
      }
      expect(viewController.onExampleComponentExampleEvent.callCount).to.equal(0);
    });
    specify('creates a view controller getter and attach event listeners (with options) to events for view components referenced by selector', function() {
      var component, components, eventListenerFunction, expectedScope, view, viewController, _i, _j, _len, _len1;

      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      eventListenerFunction = sinon.stub();
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: 'example',
            listeners: {
              exampleevent: {
                fn: eventListenerFunction,
                scope: expectedScope,
                single: true
              }
            }
          }
        }
      });
      view = Ext.create('ExampleView', {
        items: [
          {
            xtype: 'example'
          }, {
            xtype: 'example'
          }, {
            xtype: 'example'
          }
        ]
      });
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      components = view.query('example');
      expect(viewController.getExample()).to.deep.equal(components);
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        expect(hasListener(component, 'exampleevent')).to.be["true"];
        component.fireExampleEvent('expected value');
        expect(eventListenerFunction.lastCall).to.be.calledWith(component, 'expected value', {
          single: true
        }).and.calledOn(expectedScope);
      }
      expect(eventListenerFunction.callCount).to.equal(3);
      eventListenerFunction.reset();
      for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
        component = components[_j];
        expect(hasListener(component, 'exampleevent')).to.be["false"];
        component.fireExampleEvent('unexpected value');
        expect(eventListenerFunction).not.to.be.called;
      }
      expect(eventListenerFunction.callCount).to.equal(0);
    });
    specify('creates a view controller getter for a dynamic view component referenced by a live selector implicitly by itemId', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true
          }
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(viewController.getDynamicExample()).to.equal(null);
      component = view.add({
        xtype: 'example',
        itemId: 'dynamicExample'
      });
      expect(viewController.getDynamicExample()).to.equal(component);
    });
    specify('creates a view controller getter for a dynamic view component referenced explicitly by a live selector', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            selector: '#dynamicExample',
            live: true
          }
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(viewController.getDynamicExample()).to.equal(null);
      component = view.add({
        xtype: 'example',
        itemId: 'dynamicExample'
      });
      expect(viewController.getDynamicExample()).to.equal(component);
    });
    specify('creates a view controller getter and attach view controller scoped event listeners to events for a dynamic view component referenced by a live selector implicitly by itemId', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            listeners: {
              exampleevent: 'onDynamicExampleComponentExampleEvent'
            }
          }
        },
        onDynamicExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onDynamicExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(viewController.getDynamicExample()).to.equal(null);
      component = view.add({
        xtype: 'example',
        itemId: 'dynamicExample'
      });
      expect(viewController.getDynamicExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      expect(viewController.onDynamicExampleComponentExampleEvent).to.be.calledOnce.and.calledWith(component, 'expected value').and.calledOn(viewController);
    });
    specify('creates a view controller getter and attach view controller scoped event listeners (with options) to events for a dynamic view component referenced by a live selector implicitly by itemId', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            listeners: {
              exampleevent: {
                fn: 'onDynamicExampleComponentExampleEvent',
                single: true
              }
            }
          }
        },
        onDynamicExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onDynamicExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(viewController.getDynamicExample()).to.equal(null);
      component = view.add({
        xtype: 'example',
        itemId: 'dynamicExample'
      });
      expect(viewController.getDynamicExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      component.fireExampleEvent('unexpected value');
      expect(viewController.onDynamicExampleComponentExampleEvent).to.be.calledOnce.and.calledWith(component, 'expected value', {
        single: true
      }).and.calledOn(viewController);
    });
    specify('creates a view controller getter and attach event listeners (with options) to events for a dynamic view component referenced by a live selector implicitly by itemId', function() {
      var component, eventListenerFunction, expectedScope, view, viewController;

      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      eventListenerFunction = sinon.stub();
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            listeners: {
              exampleevent: {
                fn: eventListenerFunction,
                scope: expectedScope,
                single: true
              }
            }
          }
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(viewController.getDynamicExample()).to.equal(null);
      component = view.add({
        xtype: 'example',
        itemId: 'dynamicExample'
      });
      expect(viewController.getDynamicExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      component.fireExampleEvent('unexpected value');
      expect(eventListenerFunction).to.be.calledOnce.and.calledWith(component, 'expected value', {
        single: true
      }).and.calledOn(expectedScope);
    });
    specify('creates a view controller getter and attach view controller scoped event listeners to events for a dynamic view component referenced by a live selector', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            selector: '#dynamicExample',
            listeners: {
              exampleevent: 'onDynamicExampleComponentExampleEvent'
            }
          }
        },
        onDynamicExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onDynamicExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(viewController.getDynamicExample()).to.equal(null);
      component = view.add({
        xtype: 'example',
        itemId: 'dynamicExample'
      });
      expect(viewController.getDynamicExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      expect(viewController.onDynamicExampleComponentExampleEvent).to.be.calledOnce.and.calledWith(component, 'expected value').and.calledOn(viewController);
    });
    specify('creates a view controller getter and attach view controller scoped event listeners (with options) to events for a dynamic view component referenced by a live selector', function() {
      var component, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            selector: '#dynamicExample',
            listeners: {
              exampleevent: {
                fn: 'onDynamicExampleComponentExampleEvent',
                single: true
              }
            }
          }
        },
        onDynamicExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onDynamicExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(viewController.getDynamicExample()).to.equal(null);
      component = view.add({
        xtype: 'example',
        itemId: 'dynamicExample'
      });
      expect(viewController.getDynamicExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      component.fireExampleEvent('unexpected value');
      expect(viewController.onDynamicExampleComponentExampleEvent).to.be.calledOnce.and.calledWith(component, 'expected value', {
        single: true
      }).and.calledOn(viewController);
    });
    specify('creates a view controller getter and attach event listeners (with options) to events for a dynamic view component referenced by a live selector', function() {
      var component, eventListenerFunction, expectedScope, view, viewController;

      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      eventListenerFunction = sinon.stub();
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            selector: '#dynamicExample',
            listeners: {
              exampleevent: {
                fn: eventListenerFunction,
                scope: expectedScope,
                single: true
              }
            }
          }
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      expect(viewController.getDynamicExample()).to.equal(null);
      component = view.add({
        xtype: 'example',
        itemId: 'dynamicExample'
      });
      expect(viewController.getDynamicExample()).to.equal(component);
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      component.fireExampleEvent('expected value');
      component.fireExampleEvent('unexpected value');
      expect(eventListenerFunction).to.be.calledOnce.and.calledWith(component, 'expected value', {
        single: true
      }).and.calledOn(expectedScope);
    });
    specify('creates a view controller getter and attach view controller scoped event listeners to events for a dynamic view components referenced by a live selector', function() {
      var component, components, existingComponent, view, viewController, _i, _len;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            selector: 'example',
            listeners: {
              exampleevent: 'onDynamicExampleComponentExampleEvent'
            }
          }
        },
        onDynamicExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onDynamicExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      existingComponent = view.query('example')[0];
      expect(viewController.getDynamicExample()).to.equal(existingComponent);
      view.add([
        {
          xtype: 'example'
        }, {
          xtype: 'example'
        }, {
          xtype: 'example'
        }
      ]);
      components = view.query('example');
      expect(viewController.getDynamicExample()).to.deep.equal(components);
      expect(viewController.getDynamicExample().length).to.equal(4);
      view.remove(components[2]);
      components = view.query('example');
      expect(viewController.getDynamicExample()).to.deep.equal(components);
      expect(viewController.getDynamicExample().length).to.equal(3);
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        expect(hasListener(component, 'exampleevent')).to.be["true"];
        component.fireExampleEvent('expected value');
        expect(viewController.onDynamicExampleComponentExampleEvent.lastCall).to.be.calledWith(component, 'expected value').and.calledOn(viewController);
      }
      expect(viewController.onDynamicExampleComponentExampleEvent.callCount).to.equal(3);
    });
    specify('creates a view controller getter and attach view controller scoped event listeners (with options) to events for a dynamic view components referenced by a live selector', function() {
      var component, components, existingComponent, view, viewController, _i, _j, _len, _len1;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            selector: 'example',
            listeners: {
              exampleevent: {
                fn: 'onDynamicExampleComponentExampleEvent',
                single: true
              }
            }
          }
        },
        onDynamicExampleComponentExampleEvent: function() {}
      });
      sinon.spy(ExampleViewController.prototype, 'onDynamicExampleComponentExampleEvent');
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      existingComponent = view.query('example')[0];
      expect(viewController.getDynamicExample()).to.equal(existingComponent);
      view.add([
        {
          xtype: 'example'
        }, {
          xtype: 'example'
        }, {
          xtype: 'example'
        }
      ]);
      components = view.query('example');
      expect(viewController.getDynamicExample()).to.deep.equal(components);
      expect(viewController.getDynamicExample().length).to.equal(4);
      view.remove(components[2]);
      components = view.query('example');
      expect(viewController.getDynamicExample()).to.deep.equal(components);
      expect(viewController.getDynamicExample().length).to.equal(3);
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        expect(hasListener(component, 'exampleevent')).to.be["true"];
        component.fireExampleEvent('expected value');
        expect(viewController.onDynamicExampleComponentExampleEvent.lastCall).to.be.calledWith(component, 'expected value', {
          single: true
        }).and.calledOn(viewController);
      }
      expect(viewController.onDynamicExampleComponentExampleEvent.callCount).to.equal(3);
      viewController.onDynamicExampleComponentExampleEvent.reset();
      for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
        component = components[_j];
        expect(hasListener(component, 'exampleevent')).to.be["false"];
        component.fireExampleEvent('expected value');
        expect(viewController.onDynamicExampleComponentExampleEvent).not.be.called;
      }
      expect(viewController.onDynamicExampleComponentExampleEvent.callCount).to.equal(0);
    });
    return specify('creates a view controller getter and attach event listeners (with options) to events for a dynamic view components referenced by a live selector', function() {
      var component, components, eventListenerFunction, existingComponent, expectedScope, view, viewController, _i, _j, _len, _len1;

      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      eventListenerFunction = sinon.stub();
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            selector: 'example',
            listeners: {
              exampleevent: {
                fn: eventListenerFunction,
                scope: expectedScope,
                single: true
              }
            }
          }
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(viewController.getView()).to.equal(view);
      existingComponent = view.query('example')[0];
      expect(viewController.getDynamicExample()).to.equal(existingComponent);
      view.add([
        {
          xtype: 'example'
        }, {
          xtype: 'example'
        }, {
          xtype: 'example'
        }
      ]);
      components = view.query('example');
      expect(viewController.getDynamicExample()).to.deep.equal(components);
      expect(viewController.getDynamicExample().length).to.equal(4);
      view.remove(components[2]);
      components = view.query('example');
      expect(viewController.getDynamicExample()).to.deep.equal(components);
      expect(viewController.getDynamicExample().length).to.equal(3);
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        expect(hasListener(component, 'exampleevent')).to.be["true"];
        component.fireExampleEvent('expected value');
        expect(eventListenerFunction.lastCall).to.be.calledWith(component, 'expected value', {
          single: true
        }).and.calledOn(expectedScope);
      }
      expect(eventListenerFunction.callCount).to.equal(3);
      eventListenerFunction.reset();
      for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
        component = components[_j];
        expect(hasListener(component, 'exampleevent')).to.be["false"];
        component.fireExampleEvent('expected value');
        expect(eventListenerFunction).not.to.be.called;
      }
      expect(eventListenerFunction.callCount).to.equal(0);
    });
  });
  describe('Observer creation', function() {
    beforeEach(function() {
      Ext.define('NestedObservable', {
        constructor: function() {
          this.observable = Ext.create('Ext.util.Observable');
          return this.callParent(arguments);
        }
      });
      Ext.define('DeeplyNestedObservable', {
        constructor: function() {
          this.nested = Ext.create('NestedObservable');
          return this.callParent(arguments);
        }
      });
    });
    specify('merges child observe configurations', function() {
      var expectedObserveConfiguration, viewController;

      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler'
          }
        }
      });
      viewController = Ext.create('ExampleSubclassViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclassMessage: ['subclassMessageHandler'],
          baseMessage: ['baseMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
    });
    specify('merges observe configurations when extend when a handler is a list', function() {
      var expectedObserveConfiguration, viewController;

      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler1, subclassMessageHandler2'
          }
        }
      });
      viewController = Ext.create('ExampleSubclassViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclassMessage: ['subclassMessageHandler1', 'subclassMessageHandler2'],
          baseMessage: ['baseMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
    });
    specify('merges multiple levels of observe configurations throughout a class hierarchy', function() {
      var expectedObserveConfiguration, viewController;

      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: "baseMessageHandler"
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: "subclassMessageHandler"
          }
        }
      });
      Ext.define('ExampleSubclass2ViewController', {
        extend: 'ExampleSubclassViewController',
        observe: {
          messageBus: {
            subclass2Message: "subclass2MessageHandler"
          }
        }
      });
      viewController = Ext.create('ExampleSubclass2ViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclass2Message: ['subclass2MessageHandler'],
          subclassMessage: ['subclassMessageHandler'],
          baseMessage: ['baseMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
    });
    specify('merges multiple levels of child observe configurations, with child observers taking precedence', function() {
      var expectedObserveConfiguration, viewController;

      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclass2ViewController', {
        extend: 'ExampleSubclassViewController',
        observe: {
          messageBus: {
            baseMessage: 'subclass2MessageHandler'
          }
        }
      });
      viewController = Ext.create('ExampleSubclass2ViewController');
      expectedObserveConfiguration = {
        messageBus: {
          baseMessage: ['subclass2MessageHandler', 'baseMessageHandler'],
          subclassMessage: ['subclassMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
    });
    specify('merges multiple levels of child observe configurations when middle subclass has no observers', function() {
      var expectedObserveConfiguration, viewController;

      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController'
      });
      Ext.define('ExampleSubclass2ViewController', {
        extend: 'ExampleSubclassViewController',
        observe: {
          messageBus: {
            subclass2Message: 'subclass2MessageHandler'
          }
        }
      });
      viewController = Ext.create('ExampleSubclass2ViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclass2Message: ['subclass2MessageHandler'],
          baseMessage: ['baseMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
    });
    specify('merges multiple levels of subclass observe configurations when the base class has no observers', function() {
      var expectedObserveConfiguration, viewController;

      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController'
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler'
          }
        }
      });
      Ext.define('ExampleSubclass2ViewController', {
        extend: 'ExampleSubclassViewController',
        observe: {
          messageBus: {
            subclass2Message: 'subclass2MessageHandler'
          }
        }
      });
      viewController = Ext.create('ExampleSubclass2ViewController');
      expectedObserveConfiguration = {
        messageBus: {
          subclass2Message: ['subclass2MessageHandler'],
          subclassMessage: ['subclassMessageHandler']
        }
      };
      expect(viewController.observe).to.deep.equal(expectedObserveConfiguration);
    });
    specify('attaches listeners to observed objects in a ViewController with no subclasses', function() {
      var eventData, messageBus, viewController;

      eventData = {
        value1: true,
        value2: false
      };
      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null
        },
        observe: {
          messageBus: {
            message: 'messageHandler'
          }
        },
        messageHandler: function(data) {}
      });
      sinon.spy(ExampleViewController.prototype, 'messageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      viewController = Ext.create('ExampleViewController', {
        messageBus: messageBus
      });
      expect(hasListener(messageBus, 'message')).to.be["true"];
      messageBus.fireEvent('message', eventData);
      return expect(viewController.messageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(viewController);
    });
    specify('attaches listeners to observed objects in a ViewController subclass where the subclass has an observe configuration', function() {
      var baseEventData, messageBus, store, storeEventData, subclassEventData, viewController;

      baseEventData = {
        value1: true,
        value2: false
      };
      subclassEventData = {
        value2: true,
        value3: false
      };
      storeEventData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          store: null
        },
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          },
          store: {
            beforesync: 'storeHandler'
          }
        },
        baseMessageHandler: function(data) {},
        storeHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            subclassMessage: 'subclassMessageHandler'
          }
        },
        subclassMessageHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        store: store
      });
      expect(hasListener(messageBus, 'baseMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage')).to.be["true"];
      expect(hasListener(store, 'beforesync')).to.be["true"];
      messageBus.fireEvent('baseMessage', baseEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      store.fireEvent('beforesync', storeEventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(subclassEventData).and.calledOn(viewController);
      expect(viewController.storeHandler).to.be.calledOnce.and.calledWith(storeEventData).and.calledOn(viewController);
    });
    specify('attaches listeners (with options) to observed objects in a ViewController', function() {
      var baseEventData, expectedScope, messageBus, store, storeEventData, subclassEventData, viewController;

      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      baseEventData = {
        value1: true,
        value2: false
      };
      subclassEventData = {
        value2: true,
        value3: false
      };
      storeEventData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          store: null
        },
        observe: {
          messageBus: [
            {
              event: 'baseMessage',
              fn: 'baseMessageHandler',
              scope: expectedScope
            }
          ],
          store: [
            {
              event: 'beforesync',
              fn: 'storeHandler',
              scope: expectedScope
            }
          ]
        },
        baseMessageHandler: function(data) {},
        storeHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: [
            {
              event: 'subclassMessage',
              fn: 'subclassMessageHandler',
              scope: expectedScope
            }
          ]
        },
        subclassMessageHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        store: store
      });
      expect(hasListener(messageBus, 'baseMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage')).to.be["true"];
      expect(hasListener(store, 'beforesync')).to.be["true"];
      messageBus.fireEvent('baseMessage', baseEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      store.fireEvent('beforesync', storeEventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(expectedScope);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(subclassEventData).and.calledOn(expectedScope);
      expect(viewController.storeHandler).to.be.calledOnce.and.calledWith(storeEventData).and.calledOn(expectedScope);
    });
    specify('attaches listeners to nested properties of observed objects', function() {
      var deeply, deeplyNestedObservableEventData, messageBus, messageEventData, store, storeProxyEventData, viewController;

      messageEventData = {
        value1: true,
        value2: false
      };
      storeProxyEventData = {
        value3: true,
        value4: false
      };
      deeplyNestedObservableEventData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          store: null,
          deeply: null
        },
        observe: {
          messageBus: {
            message: 'messageHandler'
          },
          'store.proxy': {
            metachange: 'storeProxyHandler'
          }
        },
        messageHandler: function(data) {},
        storeProxyHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          'deeply.nested.observable': {
            exception: "deeplyNestedObservableHandler"
          }
        },
        deeplyNestedObservableHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'messageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeProxyHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'deeplyNestedObservableHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      deeply = Ext.create('DeeplyNestedObservable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        store: store,
        deeply: deeply
      });
      messageBus.fireEvent('message', messageEventData);
      store.getProxy().fireEvent('metachange', storeProxyEventData);
      deeply.nested.observable.fireEvent('exception', deeplyNestedObservableEventData);
      expect(viewController.messageHandler).to.be.calledOnce.and.calledWith(messageEventData).and.calledOn(viewController);
      expect(viewController.storeProxyHandler).to.be.calledOnce.and.calledWith(storeProxyEventData).and.calledOn(viewController);
      expect(viewController.deeplyNestedObservableHandler).to.be.calledOnce.and.calledWith(deeplyNestedObservableEventData).and.calledOn(viewController);
    });
    specify('attaches listeners in the base class and subclass to the same observed object', function() {
      var eventData, messageBus, viewController;

      eventData = {
        value1: true,
        value2: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          store: null
        },
        observe: {
          messageBus: {
            message: 'baseMessageHandler'
          }
        },
        baseMessageHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: {
            message: 'subclassMessageHandler'
          }
        },
        subclassMessageHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus
      });
      expect(hasListener(messageBus, 'message')).to.be["true"];
      messageBus.fireEvent('message', eventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(viewController);
    });
    specify('attaches listeners (with options) in the base class and subclass to the same observed object', function() {
      var eventData, expectedScope, messageBus, viewController;

      Ext.define('ExampleScope', {});
      expectedScope = Ext.create('ExampleScope');
      eventData = {
        value1: true,
        value2: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          store: null
        },
        observe: {
          messageBus: [
            {
              event: 'message',
              fn: 'baseMessageHandler',
              scope: expectedScope
            }
          ]
        },
        baseMessageHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: [
            {
              event: 'message',
              fn: 'subclassMessageHandler',
              scope: expectedScope
            }
          ]
        },
        subclassMessageHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      messageBus = Ext.create('Ext.util.Observable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus
      });
      expect(hasListener(messageBus, 'message')).to.be["true"];
      messageBus.fireEvent('message', eventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(expectedScope);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(eventData).and.calledOn(expectedScope);
    });
    specify('creates observers specified via a variety of the available observe property syntax', function() {
      var baseEventData, deeply, deeplyNestedObservableData, messageBus, store, storeEventData, subclassEventData, subclassEventData2, viewController;

      baseEventData = {
        value1: true,
        value2: false
      };
      subclassEventData = {
        valueA: true,
        valueB: false
      };
      subclassEventData2 = {
        valueC: true,
        valueD: false
      };
      storeEventData = {
        value3: true,
        value4: false
      };
      deeplyNestedObservableData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          store: null,
          deeply: null
        },
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          },
          'store.proxy': [
            {
              event: 'metachange',
              fn: 'storeProxyHandler'
            }
          ]
        },
        baseMessageHandler: function(data) {},
        storeProxyHandler: function(data) {}
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: [
            {
              event: 'baseMessage',
              fn: 'subclassMessageHandlerForBaseMessage'
            }, {
              event: 'subclassMessage',
              fn: 'subclassMessageHandler'
            }, {
              subclassMessage2: 'subclassMessageHandler2'
            }
          ],
          'deeply.nested.observable': [
            {
              event: 'exception',
              fn: 'deeplyNestedObservableHandler'
            }
          ]
        },
        subclassMessageHandlerForBaseMessage: function(data) {},
        subclassMessageHandler: function(data) {},
        subclassMessageHandler2: function(data) {},
        deeplyNestedObservableHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeProxyHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandlerForBaseMessage');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler2');
      sinon.spy(ExampleSubclassViewController.prototype, 'deeplyNestedObservableHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      deeply = Ext.create('DeeplyNestedObservable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        store: store,
        deeply: deeply
      });
      expect(hasListener(messageBus, 'baseMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage2')).to.be["true"];
      expect(hasListener(store.getProxy(), 'metachange')).to.be["true"];
      expect(hasListener(deeply.nested.observable, 'exception')).to.be["true"];
      messageBus.fireEvent('baseMessage', baseEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      messageBus.fireEvent('subclassMessage2', subclassEventData2);
      store.getProxy().fireEvent('metachange', storeEventData);
      deeply.nested.observable.fireEvent('exception', deeplyNestedObservableData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandlerForBaseMessage).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(subclassEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler2).to.be.calledOnce.and.calledWith(subclassEventData2).and.calledOn(viewController);
      expect(viewController.storeProxyHandler).to.be.calledOnce.and.calledWith(storeEventData).and.calledOn(viewController);
      expect(viewController.deeplyNestedObservableHandler).to.be.calledOnce.and.calledWith(deeplyNestedObservableData).and.calledOn(viewController);
    });
    specify('creates observers specified via a variety of the available observe property syntax (with event options)', function() {
      var baseEventData, deeply, deeplyNestedObservableEventData, messageBus, store, storeEventData, subclassEventData, subclassEventData2, viewController;

      baseEventData = {
        value1: true,
        value2: false
      };
      subclassEventData = {
        valueA: true,
        valueB: false
      };
      subclassEventData2 = {
        valueC: true,
        valueD: false
      };
      storeEventData = {
        value3: true,
        value4: false
      };
      deeplyNestedObservableEventData = {
        value5: true,
        value6: false
      };
      Ext.define('ExampleBaseViewController', {
        extend: 'Deft.mvc.ViewController',
        config: {
          messageBus: null,
          store: null,
          deeply: null
        },
        observe: {
          messageBus: {
            baseMessage: 'baseMessageHandler'
          },
          'store.proxy': [
            {
              event: 'metachange',
              fn: 'storeProxyHandler',
              single: true
            }
          ]
        },
        baseMessageHandler: function(data) {},
        storeProxyHandler: function(data, eventOptions) {
          expect(eventOptions.single).to.be["true"];
        }
      });
      Ext.define('ExampleSubclassViewController', {
        extend: 'ExampleBaseViewController',
        observe: {
          messageBus: [
            {
              event: 'baseMessage',
              fn: 'subclassMessageHandlerForBaseMessage'
            }, {
              event: 'subclassMessage',
              fn: 'subclassMessageHandler',
              single: true
            }, {
              subclassMessage2: 'subclassMessageHandler2'
            }
          ],
          'deeply.nested.observable': [
            {
              event: 'exception',
              fn: 'deeplyNestedObservableHandler',
              single: true
            }
          ]
        },
        subclassMessageHandlerForBaseMessage: function(data) {},
        subclassMessageHandler: function(data, eventOptions) {
          expect(eventOptions.single).to.be["true"];
        },
        subclassMessageHandler2: function(data) {},
        deeplyNestedObservableHandler: function(data) {}
      });
      sinon.spy(ExampleBaseViewController.prototype, 'baseMessageHandler');
      sinon.spy(ExampleBaseViewController.prototype, 'storeProxyHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandlerForBaseMessage');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler');
      sinon.spy(ExampleSubclassViewController.prototype, 'subclassMessageHandler2');
      sinon.spy(ExampleSubclassViewController.prototype, 'deeplyNestedObservableHandler');
      messageBus = Ext.create('Ext.util.Observable');
      store = Ext.create('Ext.data.ArrayStore');
      deeply = Ext.create('DeeplyNestedObservable');
      viewController = Ext.create('ExampleSubclassViewController', {
        messageBus: messageBus,
        store: store,
        deeply: deeply
      });
      expect(hasListener(messageBus, 'baseMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage')).to.be["true"];
      expect(hasListener(messageBus, 'subclassMessage2')).to.be["true"];
      expect(hasListener(store.getProxy(), 'metachange')).to.be["true"];
      expect(hasListener(deeply.nested.observable, 'exception')).to.be["true"];
      messageBus.fireEvent('baseMessage', baseEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      messageBus.fireEvent('subclassMessage2', subclassEventData2);
      store.getProxy().fireEvent('metachange', storeEventData);
      deeply.nested.observable.fireEvent('exception', deeplyNestedObservableEventData);
      messageBus.fireEvent('subclassMessage', subclassEventData);
      store.getProxy().fireEvent('metachange', storeEventData);
      deeply.nested.observable.fireEvent('exception', deeplyNestedObservableEventData);
      expect(viewController.baseMessageHandler).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandlerForBaseMessage).to.be.calledOnce.and.calledWith(baseEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler).to.be.calledOnce.and.calledWith(subclassEventData).and.calledOn(viewController);
      expect(viewController.subclassMessageHandler2).to.be.calledOnce.and.calledWith(subclassEventData2).and.calledOn(viewController);
      expect(viewController.storeProxyHandler).to.be.calledOnce.and.calledWith(storeEventData).and.calledOn(viewController);
      expect(viewController.deeplyNestedObservableHandler).to.be.calledOnce.and.calledWith(deeplyNestedObservableEventData).and.calledOn(viewController);
    });
  });
  describe('Destruction and clean-up', function() {
    beforeEach(function() {
      Ext.define('ExampleComponent', {
        extend: 'Ext.Component',
        alias: 'widget.example'
      });
      Ext.define('ExampleView', {
        extend: 'Ext.Container',
        renderTo: 'componentTestArea',
        items: [
          {
            xtype: 'example',
            itemId: 'example'
          }
        ],
        config: {
          items: [
            {
              xtype: 'example',
              itemId: 'example'
            }
          ]
        }
      });
      Ext.DomHelper.append(Ext.getBody(), '<div id="componentTestArea" style="visibility: hidden"></div>');
    });
    afterEach(function() {
      Ext.removeNode(Ext.get('componentTestArea').dom);
    });
    specify('calls destroy() when the associated view is destroyed', function() {
      var isViewDestroyed, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController'
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      sinon.spy(viewController, 'destroy');
      isViewDestroyed = false;
      view.on('destroy', function() {
        return isViewDestroyed = true;
      });
      view.destroy();
      expect(viewController.destroy).to.be.calledOnce;
      expect(isViewDestroyed).to.be["true"];
    });
    specify('cancels view destruction if the view controller\'s destroy() returns false', function() {
      var isViewDestroyed, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        destroy: function() {
          return false;
        }
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      sinon.spy(viewController, 'destroy');
      isViewDestroyed = false;
      view.on('destroy', function() {
        return isViewDestroyed = true;
      });
      view.destroy();
      expect(viewController.destroy).to.be.calledOnce;
      expect(isViewDestroyed).to.be["false"];
    });
    specify('removes event listeners it attached to the view when the associated view (and view controller) is destroyed', function() {
      var isViewDestroyed, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          view: {
            exampleevent: 'onExampleViewExampleEvent'
          }
        },
        onExampleViewExampleEvent: function(event) {}
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      expect(hasListener(view, 'exampleevent')).to.be["true"];
      sinon.spy(viewController, 'destroy');
      isViewDestroyed = false;
      view.on('destroy', function() {
        return isViewDestroyed = true;
      });
      view.destroy();
      expect(viewController.destroy).to.be.called;
      expect(isViewDestroyed).to.be["true"];
      expect(hasListener(view, 'exampleevent')).to.be.flse;
    });
    specify('removes event listeners it attached to a view component referenced implicitly by itemId when the associated view (and view controller) is destroyed', function() {
      var component, isViewDestroyed, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: '#example',
            listeners: {
              exampleevent: 'onExampleComponentExampleEvent'
            }
          }
        },
        onExampleComponentExampleEvent: function() {}
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      component = view.query('#example')[0];
      expect(viewController.getExample).not.to.be["null"];
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      sinon.spy(viewController, 'destroy');
      isViewDestroyed = false;
      view.on('destroy', function() {
        return isViewDestroyed = true;
      });
      view.destroy();
      expect(viewController.destroy).to.be.calledOnce;
      expect(viewController.getExample).to.be["null"];
      expect(isViewDestroyed).to.be["true"];
      expect(hasListener(component, 'exampleevent')).to.be["false"];
    });
    specify('removes event listeners it attached to view components referenced explicitly by a selector when the associated view (and view controller) is destroyed', function() {
      var component, components, isViewDestroyed, view, viewController, _i, _j, _len, _len1;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          example: {
            selector: 'example',
            listeners: {
              exampleevent: 'onExampleComponentExampleEvent'
            }
          }
        },
        onExampleComponentExampleEvent: function() {}
      });
      view = Ext.create('ExampleView', {
        items: [
          {
            xtype: 'example'
          }, {
            xtype: 'example'
          }, {
            xtype: 'example'
          }
        ]
      });
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      components = view.query('example');
      expect(viewController.getExample).not.to.be["null"];
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        expect(hasListener(component, 'exampleevent')).to.be["true"];
      }
      sinon.spy(viewController, 'destroy');
      isViewDestroyed = false;
      view.on('destroy', function() {
        return isViewDestroyed = true;
      });
      view.destroy();
      expect(viewController.destroy).to.be.calledOnce;
      expect(viewController.getExample).to.be["null"];
      expect(isViewDestroyed).to.be["true"];
      for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
        component = components[_j];
        expect(hasListener(component, 'exampleevent')).to.be["false"];
      }
    });
    specify('removes event listeners it attached to a dynamic view component referenced by a live selector implicitly by itemId when the associated view (and view controller) is destroyed', function() {
      var component, isViewDestroyed, view, viewController;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            selector: '#dynamicExample',
            listeners: {
              exampleevent: 'onDynamicExampleComponentExampleEvent'
            }
          }
        },
        onDynamicExampleComponentExampleEvent: function() {}
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      component = view.add({
        xtype: 'example',
        itemId: 'dynamicExample'
      });
      expect(viewController.getDynamicExample).not.to.be["null"];
      expect(hasListener(component, 'exampleevent')).to.be["true"];
      sinon.spy(viewController, 'destroy');
      isViewDestroyed = false;
      view.on('destroy', function() {
        return isViewDestroyed = true;
      });
      view.destroy();
      expect(viewController.destroy).to.be.calledOnce;
      expect(viewController.getDynamicExample).to.be["null"];
      expect(isViewDestroyed).to.be["true"];
      expect(hasListener(component, 'exampleevent')).to.be["false"];
    });
    specify('removes event listeners it attached to dynamic view components referenced explicitly by a live selector when the associated view (and view controller) is destroyed', function() {
      var component, components, isViewDestroyed, view, viewController, _i, _j, _len, _len1;

      Ext.define('ExampleViewController', {
        extend: 'Deft.mvc.ViewController',
        control: {
          dynamicExample: {
            live: true,
            selector: 'example',
            listeners: {
              exampleevent: 'onDynamicExampleComponentExampleEvent'
            }
          }
        },
        onDynamicExampleComponentExampleEvent: function() {}
      });
      view = Ext.create('ExampleView');
      viewController = Ext.create('ExampleViewController', {
        view: view
      });
      view.add([
        {
          xtype: 'example'
        }, {
          xtype: 'example'
        }, {
          xtype: 'example'
        }
      ]);
      components = view.query('example');
      expect(viewController.getDynamicExample).not.to.be["null"];
      expect(viewController.getDynamicExample()).to.deep.equal(components);
      expect(viewController.getDynamicExample().length).to.equal(4);
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        expect(hasListener(component, 'exampleevent')).to.be["true"];
      }
      sinon.spy(viewController, 'destroy');
      isViewDestroyed = false;
      view.on('destroy', function() {
        return isViewDestroyed = true;
      });
      view.destroy();
      expect(viewController.destroy).to.be.calledOnce;
      expect(viewController.getDynamicExample).to.be["null"];
      expect(isViewDestroyed).to.be["true"];
      for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
        component = components[_j];
        expect(hasListener(component, 'exampleevent')).to.be["false"];
      }
    });
    return specify('removes listeners from observed objects when the view controller is destroyed', function() {
      var store, store2, view, viewController;

      Ext.define('ExampleClass', {
        extend: 'Deft.mvc.ViewController',
        config: {
          store: null,
          store2: null
        },
        observe: {
          store: {
            beforesync: 'genericHandler'
          },
          'store.proxy': {
            customevent: 'genericHandler'
          },
          store2: {
            beforesync: 'genericHandler',
            beforeload: 'genericHandler'
          }
        },
        genericHandler: function() {}
      });
      view = Ext.create('ExampleView');
      store = Ext.create('Ext.data.ArrayStore');
      store2 = Ext.create('Ext.data.ArrayStore');
      expect(hasListener(store, 'beforesync')).to.be["false"];
      expect(hasListener(store.getProxy(), 'customevent')).to.be["false"];
      expect(hasListener(store2, 'beforeload')).to.be["false"];
      viewController = Ext.create('ExampleClass', {
        view: view,
        store: store,
        store2: store2
      });
      sinon.spy(viewController, 'removeObservers');
      expect(hasListener(store, 'beforesync')).to.be["true"];
      expect(hasListener(store.getProxy(), 'customevent')).to.be["true"];
      expect(hasListener(store2, 'beforeload')).to.be["true"];
      expect(hasListener(store2, 'beforesync')).to.be["true"];
      view.destroy();
      expect(viewController.removeObservers).to.be.calledOnce;
      expect(hasListener(store, 'beforesync')).to.be["false"];
      expect(hasListener(store.getProxy(), 'customevent')).to.be["false"];
      expect(hasListener(store2, 'beforesync')).to.be["false"];
      return expect(hasListener(store2, 'beforeload')).to.be["false"];
    });
  });
});
