// Generated by CoffeeScript 1.4.0
/*
Copyright (c) 2012 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
*/

/*
Jasmine test suite for Deft.mvc.Application
*/

describe('Deft.mvc.Application', function() {
  beforeEach(function() {
    Deft.Injector.reset();
  });
  it('should run beforeInit and afterInit template methods', function() {
    var myApplication;
    Ext.define('MyApplication', {
      extend: 'Deft.mvc.Application'
    });
    spyOn(MyApplication.prototype, 'beforeInit').andCallThrough();
    spyOn(MyApplication.prototype, 'afterInit').andCallThrough();
    myApplication = Ext.create('MyApplication');
    waitsFor((function() {
      return myApplication.initialized;
    }), "Application never initialized.", 500);
    waitsFor((function() {
      return myApplication.beforeInit.wasCalled;
    }), "beforeInit() was not called.", 500);
    waitsFor((function() {
      return myApplication.afterInit.wasCalled;
    }), "afterInit() was not called.", 500);
  });
  it('should use results of buildInjectorConfig() to initialize Injector', function() {
    var myApplication;
    Ext.define('MyApplication', {
      extend: 'Deft.mvc.Application',
      buildInjectorConfig: function() {
        var result;
        return result = {
          store1: "Ext.data.Store",
          store2: "Ext.data.Store"
        };
      }
    });
    myApplication = Ext.create('MyApplication');
    expect(myApplication.initialized).toBe(true);
    expect(Deft.Injector.canResolve('store1')).toBe(true);
    expect(Deft.Injector.canResolve('store2')).toBe(true);
    expect(Deft.Injector.canResolve('_some$unknown$identifier')).toBe(false);
  });
  it('should not automatically configure Injector if no injector config is created', function() {
    var myApplication;
    Ext.define('MyApplication', {
      extend: 'Deft.mvc.Application'
    });
    spyOn(Deft.Injector, 'configure').andCallThrough();
    spyOn(MyApplication.prototype, 'afterInit').andCallThrough();
    myApplication = Ext.create('MyApplication');
    waitsFor((function() {
      return myApplication.afterInit.wasCalled;
    }), "afterInit() was not called.", 500);
    runs(function() {
      return expect(Deft.Injector.configure.wasCalled).toBe(false);
    });
  });
  return it('should allow subclasses to alter results of buildInjectorConfig()', function() {
    var mySubApplication;
    Ext.define('MyApplication', {
      extend: 'Deft.mvc.Application',
      buildInjectorConfig: function() {
        var result;
        return result = {
          store1: "Ext.data.Store",
          store2: "Ext.data.Store"
        };
      }
    });
    Ext.define('MySubApplication', {
      extend: 'MyApplication',
      buildInjectorConfig: function() {
        var result;
        result = this.callParent();
        delete result.store1;
        result.store3 = "Ext.data.Store";
        console.log(result);
        return result;
      }
    });
    mySubApplication = Ext.create('MySubApplication');
    expect(Deft.Injector.canResolve('store1')).toBe(false);
    expect(Deft.Injector.canResolve('store2')).toBe(true);
    expect(Deft.Injector.canResolve('store3')).toBe(true);
    expect(Deft.Injector.canResolve('_some$unknown$identifier')).toBe(false);
  });
});
