// Generated by CoffeeScript 1.4.0

Ext.define('Deft.core.Component', {
  override: 'Ext.Component',
  alternateClassName: ['Deft.Component'],
  constructor: (function() {
    if (Ext.getVersion('extjs') && Ext.getVersion('core').isLessThan('4.1.0')) {
      return function(config) {
        if (config !== void 0 && !this.$injected && (config.inject != null)) {
          Deft.Injector.inject(config.inject, this, false);
          this.$injected = true;
        }
        return this.callOverridden(arguments);
      };
    } else {
      return function(config) {
        if (config !== void 0 && !this.$injected && (config.inject != null)) {
          Deft.Injector.inject(config.inject, this, false);
          this.$injected = true;
        }
        return this.callParent(arguments);
      };
    }
  })(),
  setParent: function(newParent) {
    var oldParent, result;
    if (Ext.getVersion('touch') != null) {
      oldParent = this.getParent();
      result = this.callParent(arguments);
      if (oldParent === null && newParent !== null) {
        this.fireEvent('added', this, newParent);
      } else if (oldParent !== null && newParent !== null) {
        this.fireEvent('removed', this, oldParent);
        this.fireEvent('added', this, newParent);
      } else if (oldParent !== null && newParent === null) {
        this.fireEvent('removed', this, oldParent);
      }
      return result;
    } else {
      return this.callParent(arguments);
    }
  },
  is: function(selector) {
    return Ext.ComponentQuery.is(this, selector);
  },
  isDescendantOf: function(container) {
    var ancestor;
    if (Ext.getVersion('touch') != null) {
      ancestor = this.getParent();
      while (ancestor != null) {
        if (ancestor === container) {
          return true;
        }
        ancestor = ancestor.getParent();
      }
      return false;
    } else {
      return this.callParent(arguments);
    }
  }
});
